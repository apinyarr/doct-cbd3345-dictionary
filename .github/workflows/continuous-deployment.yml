---
name: Continuous Deployment (CD)
on:
  push:
    tags:
      - 'uat-release-*'
      - 'prd-release-*'

jobs:  
  uat-deployment:   # This job is triggered by 'uat-release-*' tags.
    name: Deploy Simple Dictionary App in UAT K8s Cluster
    if: startsWith(github.ref, 'refs/tags/uat-release-')
    runs-on: k8s-deployer

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Verify K8s Cluster Information
        run: |
          KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl config get-clusters
          KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl cluster-info

      - name: Ensure UAT namespace has been created
        env:
          UAT_NAMESPACE: dictionary-namespace
        run: |
          KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl get ns | grep ${{ env.UAT_NAMESPACE }} && echo ${{ env.UAT_NAMESPACE }} is existed || KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl apply -f k8s/manifests/namespace.yaml
          KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl config set-context --current --namespace=${{ env.UAT_NAMESPACE }}

      - name: Deploy the required ConfigMap to the Namespace (MONGODB_HOST and MONGODB_PORT)
        env:
          MONGODB_HOST: dic-mongodb-service
          MONGODB_PORT: 27017
        run: |
          KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl get configmap dic-config && echo "configmap dic-config is already existed" && KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl delete configmap dic-config || echo "creating a configmap"
          echo "MONGODB_HOST=${{ env.MONGODB_HOST }}" > config.properties
          echo "MONGODB_PORT=${{ env.MONGODB_PORT }}" >> config.properties
          KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl create configmap dic-config --from-file=./config.properties

      - name: Deploy the required Secret to the Namespace (MONGODB_USER and MONGODB_PWD)
        run: |
          KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl get secret secret-mongo-auth && echo "secret secret-mongo-auth is already existed" && KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl delete secret secret-mongo-auth || echo "creating a secret"
          KUBECONFIG=~/.kube/docker_desktop_k8s_config kubectl create secret generic secret-mongo-auth --from-literal=username=${{ secrets.MONGODB_USER }} --from-literal=password='${{ secrets.MONGODB_PWD }}' || 